# Create dataframes
businesses = pd.DataFrame(
    columns=[
        "id",  # Unique Yelp ID of this business
        "review_count",  # Total number of reviews for this business
        "rating",  # Rating of the business, which is an average of the ratings of all reviews
        "price",  # Price range of the business, from "$" to "$$$$" (inclusive).
        "postal_code",  # Postal code of this business (see https://en.wikipedia.org/wiki/Postal_code)
        "latitude",  # Latitude of the business
        "longitude",  # Longitude of the business
        "categories",  # List of categories the business belongs to
        "parent_categories",  # List of parent categories the business belongs to
    ]
)

reviews = pd.DataFrame(
    columns=[
        "id",  # Unique Yelp alias of the business
        "text",  # Text excerpt of this review
        "rating",  # Rating of this review
    ]
)

photos = pd.DataFrame(
    columns=[
        "id",  # Unique Yelp alias of the business
        "photo_url",  # URL of the photo
    ]
)

# Yelp's GraphQL endpoint
url = "https://api.yelp.com/v3/graphql"

# Request headers
headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/graphql",
}

# Yelp's GraphQL API returns a maximum of 240 total results
count = 200

# Yelp's GraphQL API returns a maximum of 50 results per request
limit = 50

for offset in range(0, count, limit):
    # Build the GraphQL query
    query = f'{{\n\
        search(categories: "restaurants", location: "Paris", offset: { offset }, limit: { limit }) {{\n\
            business {{\n\
                id\n\
                review_count\n\
                rating\n\
                price\n\
                location {{\n\
                    postal_code\n\
                }}\n\
                coordinates {{\n\
                    latitude\n\
                    longitude\n\
                }}\n\
                categories {{\n\
                    alias\n\
                    parent_categories {{\n\
                        alias\n\
                    }}\n\
                }}\n\
                photos\n\
                reviews {{\n\
                    text\n\
                    rating\n\
                }}\n\
            }}\n\
        }}\n\
    }}'
    
    # Send the query to the Yelp API
    response = requests.post(url, headers=headers, data=query)
    
    # Parse the response
    if not response.status_code == 200:
        raise Exception(
            f"Yelp API request failed with status code { response.status_code }. Response text: { response.text }"
        )

    # Parse the response
    data = response.json()

    if "errors" in data:
        raise Exception(
            f"Yelp API request failed with errors: { data['errors'] }"
        )

    for business in data.get("data", {}).get("search", {}).get("business", []):
        # Add the business data to the dataframe
        businesses = businesses.append(
            {
                "id": business.get("id"),
                "review_count": business.get("review_count"),
                "rating": business.get("rating"),
                "price": len(business.get("price")) if business.get("price") is not None else 0,
                "postal_code": business.get("location", {}).get("postal_code"),
                "latitude": business.get("coordinates", {}).get("latitude"),
                "longitude": business.get("coordinates", {}).get("longitude"),
                "categories": json.dumps(list(set([cat.get("alias") for cat in business.get("categories", [])]))),
                "parent_categories": json.dumps(
                    list(
                        set(
                            [
                                parent_cat.get("alias") for cat in business.get("categories", []) 
                                for parent_cat in cat.get("parent_categories", [])
                            ]
                        )
                    )
                ),
            }, 
            ignore_index=True,
        )
        
        
        # Add the photo data to the dataframe
        for photo in business.get("photos", []) or []:
            photos = photos.append({"id": business.get("id"), "photo_url": photo}, ignore_index=True)

        # Add the review data to the dataframe
        for review in business.get("reviews", []) or []:
            reviews = reviews.append(
                {"id": business.get("id"), "text": review.get("text"), "rating": review.get("rating")},
                ignore_index=True,
            )